// COLORS

/* Put in your brand colors here */
$pink: #f3a591;
$black: #000000;
$white: #f6e2ca;
$red: #a61e25;

// FONTS
/* Import your fonts here */
@import url("https://use.typekit.net/tbw1wgi.css");
$header-font-family: nitti, monospace;
$header-font-weight: 700;
$header-font-style: normal;

$subhead-font-family: nitti, monospace;
$subhead-font-weight: 400;
$subhead-font-style: normal;

$body-font-family: nitti, monospace;
$body-font-weight: 400;
$body-font-style: normal;

$button-font-family: nitti, monospace;
$button-font-weight: 400;
$button-font-style: normal;

// MIXINS FOR FONTS
@mixin header-font() {
  font-family: $header-font-family;
  font-style: $header-font-style;
  text-transform: uppercase;
}

@mixin subhead-font() {
  font-family: $subhead-font-family;
  font-weight: $subhead-font-weight;
  font-style: $subhead-font-style;
  text-transform: uppercase;
}

@mixin body-font() {
  font-family: $body-font-family;
  font-weight: $body-font-weight;
  font-style: $body-font-style;
  text-transform: uppercase;
}

@mixin button-font() {
  font-family: $button-font-family;
  font-weight: $button-font-weight;
  font-style: $button-font-style;
  text-transform: uppercase;
}

// OTHER SET STYLES
$border-width: 2px;

// TRANSITIONS
$transition: 0.5s linear;

// MEDIA QUERIES
$phone-vertical: "screen and (max-width: 420px)";
$phone: "screen and (max-width: 640px)";
$tablet-and-lower: "screen and (max-width: 768px)";
$tablet: "screen and (min-width: 641px) and (max-width: 1007px)";
$tablet-and-up: "screen and (min-width: 641px)";
$pocket: "screen and (max-width: 1007px)";
$lap-small: "screen and (max-width: 1080px) and (min-width: 768px)";
$lap: "screen and (min-width: 1008px) and (max-width: 1239px)";
$lap-and-up: "screen and (min-width: 1008px)";
$desk: "screen and (min-width: 1240px)";
$desk-and-down: "screen and (max-width: 1270px)";
$widescreen: "screen and (min-width: 1500px)";
$custom-nav: "screen and (max-width: 970px)";

@mixin mobile() {
  @media only screen and (max-width: 768px) {
    @content;
  }
}

@mixin tablet-and-lower() {
  @media only screen and (max-width: 820px) {
    @content;
  }
}

@mixin lap-small() {
  @media only screen and (max-width: 1080px) and (min-width: 768px) {
    @content;
  }
}

@mixin widescreen() {
  @media only screen and (min-width: 1500px) {
    @content;
  }
}

// GRID
$one-twelfth: calc(100vw / 12);
$two-twelfths: calc(100vw * 2 / 12);
$three-twelfths: calc(100vw * 3 / 12);
$four-twelfths: calc(100vw * 4 / 12);
$five-twelfths: calc(100vw * 5 / 12);
$six-twelfths: calc(100vw * 6 / 12);
$seven-twelfths: calc(100vw * 7 / 12);
$eight-twelfths: calc(100vw * 8 / 12);
$nine-twelfths: calc(100vw * 9 / 12);
$ten-twelfths: calc(100vw * 10 / 12);
$eleven-twelfths: calc(100vw * 11 / 12);
$full: 100vw;

// MAX_WIDTH
$container: 1208px;

// generic transform
@mixin transform($transforms) {
  -webkit-transform: $transforms;
  -moz-transform: $transforms;
  -ms-transform: $transforms;
  transform: $transforms;
}

//transition
@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

// rotate
@mixin rotate($deg) {
  @include transform(rotate(#{$deg}deg));
}

// scale
@mixin scale($scale) {
  @include transform(scale($scale));
}
// translate
@mixin translate($x, $y) {
  @include transform(translate($x, $y));
}
// skew
@mixin skew($x, $y) {
  @include transform(skew(#{$x}deg, #{$y}deg));
}
//transform origin
@mixin transform-origin($origin) {
  moz-transform-origin: $origin;
  -o-transform-origin: $origin;
  -ms-transform-origin: $origin;
  -webkit-transform-origin: $origin;
  transform-origin: $origin;
}

// --------------------------------------------------
// Flexbox SASS mixins
// The spec: http://www.w3.org/TR/css3-flexbox
// --------------------------------------------------

// Flexbox display
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex: $values;
  -webkit-flex: $values;
  -ms-flex: $values;
  flex: $values;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
  -webkit-flex-direction: $direction;
  -moz-flex-direction: $direction;
  -ms-flex-direction: $direction;
  flex-direction: $direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
  -webkit-flex-wrap: $wrap;
  -moz-flex-wrap: $wrap;
  -ms-flex-wrap: $wrap;
  flex-wrap: $wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
@mixin flex-flow($flow) {
  -webkit-flex-flow: $flow;
  -moz-flex-flow: $flow;
  -ms-flex-flow: $flow;
  flex-flow: $flow;
}

// Display Order
// - applies to: flex items
// <integer>
@mixin order($val) {
  -webkit-box-ordinal-group: $val;
  -moz-box-ordinal-group: $val;
  -ms-flex-order: $val;
  -webkit-order: $val;
  order: $val;
}

// Flex grow factor
// - applies to: flex items
// <number>
@mixin flex-grow($grow) {
  -webkit-flex-grow: $grow;
  -moz-flex-grow: $grow;
  -ms-flex-grow: $grow;
  flex-grow: $grow;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number>
@mixin flex-shrink($shrink) {
  -webkit-flex-shrink: $shrink;
  -moz-flex-shrink: $shrink;
  -ms-flex-shrink: $shrink;
  flex-shrink: $shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width>
@mixin flex-basis($width) {
  -webkit-flex-basis: $width;
  -moz-flex-basis: $width;
  -ms-flex-basis: $width;
  flex-basis: $width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around
@mixin justify-content($justify) {
  -webkit-justify-content: $justify;
  -moz-justify-content: $justify;
  -ms-justify-content: $justify;
  justify-content: $justify;
  -ms-flex-pack: $justify;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch
@mixin align-content($align) {
  -webkit-align-content: $align;
  -moz-align-content: $align;
  -ms-align-content: $align;
  align-content: $align;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch
@mixin align-items($align) {
  -webkit-align-items: $align;
  -moz-align-items: $align;
  -ms-align-items: $align;
  align-items: $align;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch
@mixin align-self($align) {
  -webkit-align-self: $align;
  -moz-align-self: $align;
  -ms-align-self: $align;
  align-self: $align;
}
